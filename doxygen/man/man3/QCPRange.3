.TH "QCPRange" 3 "Thu Oct 30 2014" "Version V0.0" "AQ0X" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPRange \- 
.PP
Represents the range an axis is encompassing\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qcustomplot\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPRange\fP ()"
.br
.RI "\fIConstructs a range with \fIlower\fP and \fIupper\fP set to zero\&. \fP"
.ti -1c
.RI "\fBQCPRange\fP (double \fBlower\fP, double \fBupper\fP)"
.br
.RI "\fIThis is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Constructs a range with the specified \fIlower\fP and \fIupper\fP values\&. \fP"
.ti -1c
.RI "double \fBsize\fP () const "
.br
.RI "\fIReturns the size of the range, i\&.e\&. \fP"
.ti -1c
.RI "double \fBcenter\fP () const "
.br
.RI "\fIReturns the center of the range, i\&.e\&. \fP"
.ti -1c
.RI "void \fBnormalize\fP ()"
.br
.RI "\fIMakes sure \fIlower\fP is numerically smaller than \fIupper\fP\&. \fP"
.ti -1c
.RI "\fBQCPRange\fP \fBsanitizedForLogScale\fP () const "
.br
.RI "\fIReturns a sanitized version of the range\&. \fP"
.ti -1c
.RI "\fBQCPRange\fP \fBsanitizedForLinScale\fP () const "
.br
.RI "\fIReturns a sanitized version of the range\&. \fP"
.ti -1c
.RI "bool \fBcontains\fP (double \fBvalue\fP) const "
.br
.RI "\fIReturns true when \fIvalue\fP lies within or exactly on the borders of the range\&. \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBvalidRange\fP (double \fBlower\fP, double \fBupper\fP)"
.br
.RI "\fIChecks, whether the specified range is within valid bounds, which are defined as \fBQCPRange::maxRange\fP and \fBQCPRange::minRange\fP\&. \fP"
.ti -1c
.RI "static bool \fBvalidRange\fP (const \fBQCPRange\fP &range)"
.br
.RI "\fIThis is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Checks, whether the specified range is within valid bounds, which are defined as \fBQCPRange::maxRange\fP and \fBQCPRange::minRange\fP\&. \fP"
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "double \fBlower\fP"
.br
.ti -1c
.RI "double \fBupper\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const double \fBminRange\fP = 1e-280"
.br
.RI "\fIMinimum range size (\fIupper\fP - \fIlower\fP) the range changing functions will accept\&. \fP"
.ti -1c
.RI "static const double \fBmaxRange\fP = 1e250"
.br
.RI "\fIMaximum values (negative and positive) the range will accept in range-changing functions\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Represents the range an axis is encompassing\&. 

contains a \fIlower\fP and \fIupper\fP double value and provides convenience input, output and modification functions\&.
.PP
\fBSee also:\fP
.RS 4
\fBQCPAxis::setRange\fP 
.RE
.PP

.PP
Definition at line 1328 of file qcustomplot\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPRange::QCPRange ()"

.PP
Constructs a range with \fIlower\fP and \fIupper\fP set to zero\&. 
.PP
Definition at line 2395 of file qcustomplot\&.cpp\&.
.PP
.nf
2395                    :
2396   lower(0),
2397   upper(0)
2398 {
2399 }
.fi
.SS "QCPRange::QCPRange (doublelower, doubleupper)"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Constructs a range with the specified \fIlower\fP and \fIupper\fP values\&. 
.PP
Definition at line 2404 of file qcustomplot\&.cpp\&.
.PP
References normalize()\&.
.PP
.nf
2404                                              :
2405   lower(lower),
2406   upper(upper)
2407 {
2408   normalize();
2409 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "double QCPRange::center () const"

.PP
Returns the center of the range, i\&.e\&. (\fIupper+\fIlower\fP)*0\fP\&.5 
.PP
Definition at line 2422 of file qcustomplot\&.cpp\&.
.PP
References lower, and upper\&.
.PP
.nf
2423 {
2424   return (upper+lower)*0\&.5;
2425 }
.fi
.SS "bool QCPRange::contains (doublevalue) const"

.PP
Returns true when \fIvalue\fP lies within or exactly on the borders of the range\&. 
.PP
Definition at line 2508 of file qcustomplot\&.cpp\&.
.PP
References lower, and upper\&.
.PP
Referenced by QCPStatisticalBox::selectTest()\&.
.PP
.nf
2509 {
2510   return value >= lower && value <= upper;
2511 }
.fi
.SS "void QCPRange::normalize ()"

.PP
Makes sure \fIlower\fP is numerically smaller than \fIupper\fP\&. If this is not the case, the values are swapped\&. 
.PP
Definition at line 2431 of file qcustomplot\&.cpp\&.
.PP
References lower, and upper\&.
.PP
Referenced by QCPRange(), sanitizedForLinScale(), and sanitizedForLogScale()\&.
.PP
.nf
2432 {
2433   if (lower > upper)
2434     qSwap(lower, upper);
2435 }
.fi
.SS "\fBQCPRange\fP QCPRange::sanitizedForLinScale () const"

.PP
Returns a sanitized version of the range\&. Sanitized means for linear scales, that \fIlower\fP will always be numerically smaller (or equal) to \fIupper\fP\&. 
.PP
Definition at line 2498 of file qcustomplot\&.cpp\&.
.PP
References lower, normalize(), and upper\&.
.PP
Referenced by QCPAxis::scaleRange(), QCPAxis::setRange(), QCPAxis::setRangeLower(), and QCPAxis::setRangeUpper()\&.
.PP
.nf
2499 {
2500   QCPRange sanitizedRange(lower, upper);
2501   sanitizedRange\&.normalize();
2502   return sanitizedRange;
2503 }
.fi
.SS "\fBQCPRange\fP QCPRange::sanitizedForLogScale () const"

.PP
Returns a sanitized version of the range\&. Sanitized means for logarithmic scales, that the range won't span the positive and negative sign domain, i\&.e\&. contain zero\&. Further \fIlower\fP will always be numerically smaller (or equal) to \fIupper\fP\&.
.PP
If the original range does span positive and negative sign domains or contains zero, the returned range will try to approximate the original range as good as possible\&. If the positive interval of the original range is wider than the negative interval, the returned range will only contain the positive interval, with lower bound set to \fIrangeFac\fP or \fIrangeFac\fP *\fIupper\fP, whichever is closer to zero\&. Same procedure is used if the negative interval is wider than the positive interval, this time by changing the \fIupper\fP bound\&. 
.PP
Definition at line 2449 of file qcustomplot\&.cpp\&.
.PP
References lower, normalize(), and upper\&.
.PP
Referenced by QCPAxis::scaleRange(), QCPAxis::setRange(), QCPAxis::setRangeLower(), QCPAxis::setRangeUpper(), and QCPAxis::setScaleType()\&.
.PP
.nf
2450 {
2451   double rangeFac = 1e-3;
2452   QCPRange sanitizedRange(lower, upper);
2453   sanitizedRange\&.normalize();
2454   // can't have range spanning negative and positive values in log plot, so change range to fix it
2455   //if (qFuzzyCompare(sanitizedRange\&.lower+1, 1) && !qFuzzyCompare(sanitizedRange\&.upper+1, 1))
2456   if (sanitizedRange\&.lower == 0\&.0 && sanitizedRange\&.upper != 0\&.0)
2457   {
2458     // case lower is 0
2459     if (rangeFac < sanitizedRange\&.upper*rangeFac)
2460       sanitizedRange\&.lower = rangeFac;
2461     else
2462       sanitizedRange\&.lower = sanitizedRange\&.upper*rangeFac;
2463   } //else if (!qFuzzyCompare(lower+1, 1) && qFuzzyCompare(upper+1, 1))
2464   else if (sanitizedRange\&.lower != 0\&.0 && sanitizedRange\&.upper == 0\&.0)
2465   {
2466     // case upper is 0
2467     if (-rangeFac > sanitizedRange\&.lower*rangeFac)
2468       sanitizedRange\&.upper = -rangeFac;
2469     else
2470       sanitizedRange\&.upper = sanitizedRange\&.lower*rangeFac;
2471   } else if (sanitizedRange\&.lower < 0 && sanitizedRange\&.upper > 0)
2472   {
2473     // find out whether negative or positive interval is wider to decide which sign domain will be chosen
2474     if (-sanitizedRange\&.lower > sanitizedRange\&.upper)
2475     {
2476       // negative is wider, do same as in case upper is 0
2477       if (-rangeFac > sanitizedRange\&.lower*rangeFac)
2478         sanitizedRange\&.upper = -rangeFac;
2479       else
2480         sanitizedRange\&.upper = sanitizedRange\&.lower*rangeFac;
2481     } else
2482     {
2483       // positive is wider, do same as in case lower is 0
2484       if (rangeFac < sanitizedRange\&.upper*rangeFac)
2485         sanitizedRange\&.lower = rangeFac;
2486       else
2487         sanitizedRange\&.lower = sanitizedRange\&.upper*rangeFac;
2488     }
2489   }
2490   // due to normalization, case lower>0 && upper<0 should never occur, because that implies upper<lower
2491   return sanitizedRange;
2492 }
.fi
.SS "double QCPRange::size () const"

.PP
Returns the size of the range, i\&.e\&. \fIupper-\fIlower\fP \fP 
.PP
Definition at line 2414 of file qcustomplot\&.cpp\&.
.PP
References lower, and upper\&.
.PP
Referenced by QCPAxis::coordToPixel(), QCPGraph::draw(), drawGridLines(), QCPAxis::generateAutoTicks(), QCPAxis::pixelToCoord(), QCPAxis::setScaleRatio(), and QCPAxis::setupTickVectors()\&.
.PP
.nf
2415 {
2416   return upper-lower;
2417 }
.fi
.SS "bool QCPRange::validRange (doublelower, doubleupper)\fC [static]\fP"

.PP
Checks, whether the specified range is within valid bounds, which are defined as \fBQCPRange::maxRange\fP and \fBQCPRange::minRange\fP\&. A valid range means: 
.PD 0

.IP "\(bu" 2
range bounds within -maxRange and maxRange 
.IP "\(bu" 2
range size above minRange 
.IP "\(bu" 2
range size below maxRange 
.PP

.PP
Definition at line 2521 of file qcustomplot\&.cpp\&.
.PP
References maxRange, and minRange\&.
.PP
Referenced by QCPAxis::scaleRange(), and QCPAxis::setRange()\&.
.PP
.nf
2522 {
2523   /*
2524   return (lower > -maxRange &&
2525           upper < maxRange &&
2526           qAbs(lower-upper) > minRange &&
2527           (lower < -minRange || lower > minRange) &&
2528           (upper < -minRange || upper > minRange));
2529           */
2530   return (lower > -maxRange &&
2531           upper < maxRange &&
2532           qAbs(lower-upper) > minRange &&
2533           qAbs(lower-upper) < maxRange);
2534 }
.fi
.SS "bool QCPRange::validRange (const \fBQCPRange\fP &range)\fC [static]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Checks, whether the specified range is within valid bounds, which are defined as \fBQCPRange::maxRange\fP and \fBQCPRange::minRange\fP\&. A valid range means: 
.PD 0

.IP "\(bu" 2
range bounds within -maxRange and maxRange 
.IP "\(bu" 2
range size above minRange 
.IP "\(bu" 2
range size below maxRange 
.PP

.PP
Definition at line 2545 of file qcustomplot\&.cpp\&.
.PP
References lower, maxRange, minRange, and upper\&.
.PP
.nf
2546 {
2547   /*
2548   return (range\&.lower > -maxRange &&
2549           range\&.upper < maxRange &&
2550           qAbs(range\&.lower-range\&.upper) > minRange &&
2551           qAbs(range\&.lower-range\&.upper) < maxRange &&
2552           (range\&.lower < -minRange || range\&.lower > minRange) &&
2553           (range\&.upper < -minRange || range\&.upper > minRange));
2554           */
2555   return (range\&.lower > -maxRange &&
2556           range\&.upper < maxRange &&
2557           qAbs(range\&.lower-range\&.upper) > minRange &&
2558           qAbs(range\&.lower-range\&.upper) < maxRange);
2559 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "double QCPRange::lower"

.PP
Definition at line 1331 of file qcustomplot\&.h\&.
.PP
Referenced by center(), contains(), QCPAxis::coordToPixel(), QCPBars::draw(), drawGridLines(), QCPAxis::generateAutoTicks(), QCPCurve::getCurveData(), QCPGraph::getKeyRange(), QCPCurve::getKeyRange(), QCPBars::getKeyRange(), QCPGraph::getValueRange(), QCPCurve::getValueRange(), QCPBars::getValueRange(), QCPGraph::getVisibleDataBounds(), mouseMoveEvent(), QCPAxis::moveRange(), normalize(), QCPAxis::pixelToCoord(), QCPAbstractPlottable::rescaleKeyAxis(), QCPGraph::rescaleKeyAxis(), QCPAbstractPlottable::rescaleValueAxis(), QCPGraph::rescaleValueAxis(), sanitizedForLinScale(), sanitizedForLogScale(), QCPAxis::scaleRange(), QCPAxis::setRange(), QCPAxis::setRangeLower(), QCPAxis::setupTickVectors(), size(), validRange(), and QCPAxis::visibleTickBounds()\&.
.SS "const double QCPRange::maxRange = 1e250\fC [static]\fP"

.PP
Maximum values (negative and positive) the range will accept in range-changing functions\&. Larger absolute values would cause errors due to the 11-bit exponent of double precision numbers, corresponding to a maximum magnitude of roughly 1e308\&. Since the number of planck-volumes in the entire visible universe is only ~1e183, this should be enough\&. 
.PP
\fBSee also:\fP
.RS 4
\fBvalidRange\fP, \fBminRange\fP 
.RE
.PP

.PP
Definition at line 1344 of file qcustomplot\&.h\&.
.PP
Referenced by validRange()\&.
.SS "const double QCPRange::minRange = 1e-280\fC [static]\fP"

.PP
Minimum range size (\fIupper\fP - \fIlower\fP) the range changing functions will accept\&. Smaller intervals would cause errors due to the 11-bit exponent of double precision numbers, corresponding to a minimum magnitude of roughly 1e-308\&. 
.PP
\fBSee also:\fP
.RS 4
\fBvalidRange\fP, \fBmaxRange\fP 
.RE
.PP

.PP
Definition at line 1343 of file qcustomplot\&.h\&.
.PP
Referenced by validRange()\&.
.SS "double QCPRange::upper"

.PP
Definition at line 1331 of file qcustomplot\&.h\&.
.PP
Referenced by center(), contains(), QCPAxis::coordToPixel(), QCPBars::draw(), drawGridLines(), QCPAxis::generateAutoTicks(), QCPCurve::getCurveData(), QCPGraph::getKeyRange(), QCPCurve::getKeyRange(), QCPBars::getKeyRange(), QCPGraph::getValueRange(), QCPCurve::getValueRange(), QCPBars::getValueRange(), QCPGraph::getVisibleDataBounds(), QCPGraph::lowerFillBasePoint(), mouseMoveEvent(), QCPAxis::moveRange(), normalize(), QCPAxis::pixelToCoord(), QCPAbstractPlottable::rescaleKeyAxis(), QCPGraph::rescaleKeyAxis(), QCPAbstractPlottable::rescaleValueAxis(), QCPGraph::rescaleValueAxis(), sanitizedForLinScale(), sanitizedForLogScale(), QCPAxis::scaleRange(), QCPAxis::setRange(), QCPAxis::setRangeUpper(), QCPAxis::setupTickVectors(), size(), QCPGraph::upperFillBasePoint(), validRange(), and QCPAxis::visibleTickBounds()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for AQ0X from the source code\&.
