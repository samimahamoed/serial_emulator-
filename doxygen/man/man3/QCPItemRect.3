.TH "QCPItemRect" 3 "Thu Oct 30 2014" "Version V0.0" "AQ0X" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPItemRect \- 
.PP
A rectangle\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qcustomplot\&.h>\fP
.PP
Inherits \fBQCPAbstractItem\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPItemRect\fP (\fBQCustomPlot\fP *\fBparentPlot\fP)"
.br
.RI "\fICreates a rectangle item and sets default values\&. \fP"
.ti -1c
.RI "virtual \fB~QCPItemRect\fP ()"
.br
.ti -1c
.RI "QPen \fBpen\fP () const "
.br
.ti -1c
.RI "QPen \fBselectedPen\fP () const "
.br
.ti -1c
.RI "QBrush \fBbrush\fP () const "
.br
.ti -1c
.RI "QBrush \fBselectedBrush\fP () const "
.br
.ti -1c
.RI "void \fBsetPen\fP (const QPen &\fBpen\fP)"
.br
.RI "\fISets the pen that will be used to draw the line of the rectangle\&. \fP"
.ti -1c
.RI "void \fBsetSelectedPen\fP (const QPen &\fBpen\fP)"
.br
.RI "\fISets the pen that will be used to draw the line of the rectangle when selected\&. \fP"
.ti -1c
.RI "void \fBsetBrush\fP (const QBrush &\fBbrush\fP)"
.br
.RI "\fISets the brush that will be used to fill the rectangle\&. \fP"
.ti -1c
.RI "void \fBsetSelectedBrush\fP (const QBrush &\fBbrush\fP)"
.br
.RI "\fISets the brush that will be used to fill the rectangle when selected\&. \fP"
.ti -1c
.RI "virtual double \fBselectTest\fP (const QPointF &pos) const "
.br
.RI "\fIThis function is used to decide whether a click hits an item or not\&. \fP"
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBQCPItemPosition\fP *const \fBtopLeft\fP"
.br
.ti -1c
.RI "\fBQCPItemPosition\fP *const \fBbottomRight\fP"
.br
.ti -1c
.RI "\fBQCPItemAnchor\fP *const \fBtop\fP"
.br
.ti -1c
.RI "\fBQCPItemAnchor\fP *const \fBtopRight\fP"
.br
.ti -1c
.RI "\fBQCPItemAnchor\fP *const \fBright\fP"
.br
.ti -1c
.RI "\fBQCPItemAnchor\fP *const \fBbottom\fP"
.br
.ti -1c
.RI "\fBQCPItemAnchor\fP *const \fBbottomLeft\fP"
.br
.ti -1c
.RI "\fBQCPItemAnchor\fP *const \fBleft\fP"
.br
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "enum \fBAnchorIndex\fP { \fBaiTop\fP, \fBaiTopRight\fP, \fBaiRight\fP, \fBaiBottom\fP, \fBaiBottomLeft\fP, \fBaiLeft\fP }"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBdraw\fP (\fBQCPPainter\fP *painter)"
.br
.ti -1c
.RI "virtual QPointF \fBanchorPixelPoint\fP (int anchorId) const "
.br
.ti -1c
.RI "QPen \fBmainPen\fP () const "
.br
.ti -1c
.RI "QBrush \fBmainBrush\fP () const "
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "QPen \fBmPen\fP"
.br
.ti -1c
.RI "QPen \fBmSelectedPen\fP"
.br
.ti -1c
.RI "QBrush \fBmBrush\fP"
.br
.ti -1c
.RI "QBrush \fBmSelectedBrush\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A rectangle\&. 

Rectangle example\&. Blue dotted circles are anchors, solid blue discs are positions\&. It has two positions, \fItopLeft\fP and \fIbottomRight\fP, which define the rectangle\&. 
.PP
Definition at line 1016 of file qcustomplot\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQCPItemRect::AnchorIndex\fP\fC [protected]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIaiTop \fP\fP
.TP
\fB\fIaiTopRight \fP\fP
.TP
\fB\fIaiRight \fP\fP
.TP
\fB\fIaiBottom \fP\fP
.TP
\fB\fIaiBottomLeft \fP\fP
.TP
\fB\fIaiLeft \fP\fP
.PP
Definition at line 1048 of file qcustomplot\&.h\&.
.PP
.nf
1048 {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};
.fi
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPItemRect::QCPItemRect (\fBQCustomPlot\fP *parentPlot)"

.PP
Creates a rectangle item and sets default values\&. The constructed item can be added to the plot with QCustomPlot::addItem\&. 
.PP
Definition at line 12377 of file qcustomplot\&.cpp\&.
.PP
References bottomRight, setBrush(), QCPItemPosition::setCoords(), setPen(), setSelectedBrush(), setSelectedPen(), and topLeft\&.
.PP
.nf
12377                                                 :
12378   QCPAbstractItem(parentPlot),
12379   topLeft(createPosition("topLeft")),
12380   bottomRight(createPosition("bottomRight")),
12381   top(createAnchor("top", aiTop)),
12382   topRight(createAnchor("topRight", aiTopRight)),
12383   right(createAnchor("right", aiRight)),
12384   bottom(createAnchor("bottom", aiBottom)),
12385   bottomLeft(createAnchor("bottomLeft", aiBottomLeft)),
12386   left(createAnchor("left", aiLeft))
12387 {
12388   topLeft->setCoords(0, 1);
12389   bottomRight->setCoords(1, 0);
12390   
12391   setPen(QPen(Qt::black));
12392   setSelectedPen(QPen(Qt::blue,2));
12393   setBrush(Qt::NoBrush);
12394   setSelectedBrush(Qt::NoBrush);
12395 }
.fi
.SS "QCPItemRect::~QCPItemRect ()\fC [virtual]\fP"

.PP
Definition at line 12397 of file qcustomplot\&.cpp\&.
.PP
.nf
12398 {
12399 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "QPointF QCPItemRect::anchorPixelPoint (intanchorId) const\fC [protected]\fP, \fC [virtual]\fP"
Returns the pixel position of the anchor with Id \fIanchorId\fP\&. This function must be reimplemented in item subclasses if they want to provide anchors (\fBQCPItemAnchor\fP)\&.
.PP
For example, if the item has two anchors with id 0 and 1, this function takes one of these anchor ids and returns the respective pixel points of the specified anchor\&.
.PP
\fBSee also:\fP
.RS 4
\fBcreateAnchor\fP 
.RE
.PP

.PP
Reimplemented from \fBQCPAbstractItem\fP\&.
.PP
Definition at line 12473 of file qcustomplot\&.cpp\&.
.PP
References aiBottom, aiBottomLeft, aiLeft, aiRight, aiTop, aiTopRight, bottomRight, QCPItemPosition::pixelPoint(), and topLeft\&.
.PP
.nf
12474 {
12475   QRectF rect = QRectF(topLeft->pixelPoint(), bottomRight->pixelPoint());
12476   switch (anchorId)
12477   {
12478     case aiTop:         return (rect\&.topLeft()+rect\&.topRight())*0\&.5;
12479     case aiTopRight:    return rect\&.topRight();
12480     case aiRight:       return (rect\&.topRight()+rect\&.bottomRight())*0\&.5;
12481     case aiBottom:      return (rect\&.bottomLeft()+rect\&.bottomRight())*0\&.5;
12482     case aiBottomLeft:  return rect\&.bottomLeft();
12483     case aiLeft:        return (rect\&.topLeft()+rect\&.bottomLeft())*0\&.5;;
12484   }
12485   
12486   qDebug() << Q_FUNC_INFO << "invalid anchorId" << anchorId;
12487   return QPointF();
12488 }
.fi
.SS "QBrush QCPItemRect::brush () const\fC [inline]\fP"

.PP
Definition at line 1026 of file qcustomplot\&.h\&.
.PP
Referenced by setBrush(), and setSelectedBrush()\&.
.PP
.nf
1026 { return mBrush; }
.fi
.SS "void QCPItemRect::draw (\fBQCPPainter\fP *painter)\fC [protected]\fP, \fC [virtual]\fP"
Draws this item with the provided \fIpainter\fP\&. Called by \fBQCustomPlot::draw\fP on all its visible items\&.
.PP
The cliprect of the provided painter is set to the rect returned by \fBclipRect\fP before this function is called\&. For items this depends on the clipping settings defined by \fBsetClipToAxisRect\fP, \fBsetClipKeyAxis\fP and \fBsetClipValueAxis\fP\&. 
.PP
Implements \fBQCPAbstractItem\fP\&.
.PP
Definition at line 12455 of file qcustomplot\&.cpp\&.
.PP
References bottomRight, QCPAbstractItem::clipRect(), mainBrush(), mainPen(), QCPItemPosition::pixelPoint(), QCPPainter::setPen(), and topLeft\&.
.PP
.nf
12456 {
12457   QPointF p1 = topLeft->pixelPoint();
12458   QPointF p2 = bottomRight->pixelPoint();
12459   if (p1\&.toPoint() == p2\&.toPoint())
12460     return;
12461   QRectF rect = QRectF(p1, p2)\&.normalized();
12462   double clipPad = mainPen()\&.widthF();
12463   QRectF boundingRect = rect\&.adjusted(-clipPad, -clipPad, clipPad, clipPad);
12464   if (boundingRect\&.intersects(clipRect())) // only draw if bounding rect of rect item is visible in cliprect
12465   {
12466     painter->setPen(mainPen());
12467     painter->setBrush(mainBrush());
12468     painter->drawRect(rect);
12469   }
12470 }
.fi
.SS "QBrush QCPItemRect::mainBrush () const\fC [protected]\fP"
Returns the brush that should be used for drawing fills of the item\&. Returns mBrush when the item is not selected and mSelectedBrush when it is\&. 
.PP
Definition at line 12505 of file qcustomplot\&.cpp\&.
.PP
References mBrush, QCPAbstractItem::mSelected, and mSelectedBrush\&.
.PP
Referenced by draw()\&.
.PP
.nf
12506 {
12507   return mSelected ? mSelectedBrush : mBrush;
12508 }
.fi
.SS "QPen QCPItemRect::mainPen () const\fC [protected]\fP"
Returns the pen that should be used for drawing lines\&. Returns mPen when the item is not selected and mSelectedPen when it is\&. 
.PP
Definition at line 12495 of file qcustomplot\&.cpp\&.
.PP
References mPen, QCPAbstractItem::mSelected, and mSelectedPen\&.
.PP
Referenced by draw()\&.
.PP
.nf
12496 {
12497   return mSelected ? mSelectedPen : mPen;
12498 }
.fi
.SS "QPen QCPItemRect::pen () const\fC [inline]\fP"

.PP
Definition at line 1024 of file qcustomplot\&.h\&.
.PP
References mPen\&.
.PP
Referenced by setPen(), and setSelectedPen()\&.
.PP
.nf
1024 { return mPen; }
.fi
.SS "QBrush QCPItemRect::selectedBrush () const\fC [inline]\fP"

.PP
Definition at line 1027 of file qcustomplot\&.h\&.
.PP
.nf
1027 { return mSelectedBrush; }
.fi
.SS "QPen QCPItemRect::selectedPen () const\fC [inline]\fP"

.PP
Definition at line 1025 of file qcustomplot\&.h\&.
.PP
.nf
1025 { return mSelectedPen; }
.fi
.SS "double QCPItemRect::selectTest (const QPointF &pos) const\fC [virtual]\fP"

.PP
This function is used to decide whether a click hits an item or not\&. \fIpos\fP is a point in pixel coordinates on the \fBQCustomPlot\fP surface\&. This function returns the shortest pixel distance of this point to the item\&. If the item is either invisible or the distance couldn't be determined, -1\&.0 is returned\&. \fBsetSelectable\fP has no influence on the return value of this function\&.
.PP
If the item is represented not by single lines but by an area like \fBQCPItemRect\fP or \fBQCPItemText\fP, a click inside the area returns a constant value greater zero (typically 99% of the selectionTolerance of the parent \fBQCustomPlot\fP)\&. If the click lies outside the area, this function returns -1\&.0\&.
.PP
Providing a constant value for area objects allows selecting line objects even when they are obscured by such area objects, by clicking close to the lines (i\&.e\&. closer than 0\&.99*selectionTolerance)\&.
.PP
The actual setting of the selection state is not done by this function\&. This is handled by the parent \fBQCustomPlot\fP when the mouseReleaseEvent occurs\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetSelected\fP, QCustomPlot::setInteractions 
.RE
.PP

.PP
Implements \fBQCPAbstractItem\fP\&.
.PP
Definition at line 12444 of file qcustomplot\&.cpp\&.
.PP
References bottomRight, mBrush, QCPLayerable::mVisible, QCPItemPosition::pixelPoint(), QCPAbstractItem::rectSelectTest(), and topLeft\&.
.PP
.nf
12445 {
12446   if (!mVisible)
12447     return -1;
12448   
12449   QRectF rect = QRectF(topLeft->pixelPoint(), bottomRight->pixelPoint())\&.normalized();
12450   bool filledRect = mBrush\&.style() != Qt::NoBrush && mBrush\&.color()\&.alpha() != 0;
12451   return rectSelectTest(rect, pos, filledRect);
12452 }
.fi
.SS "void QCPItemRect::setBrush (const QBrush &brush)"

.PP
Sets the brush that will be used to fill the rectangle\&. To disable filling, set \fIbrush\fP to Qt::NoBrush\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetSelectedBrush\fP, \fBsetPen\fP 
.RE
.PP

.PP
Definition at line 12427 of file qcustomplot\&.cpp\&.
.PP
References brush(), and mBrush\&.
.PP
Referenced by QCPItemRect()\&.
.PP
.nf
12428 {
12429   mBrush = brush;
12430 }
.fi
.SS "void QCPItemRect::setPen (const QPen &pen)"

.PP
Sets the pen that will be used to draw the line of the rectangle\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsetSelectedPen\fP, \fBsetBrush\fP 
.RE
.PP

.PP
Definition at line 12406 of file qcustomplot\&.cpp\&.
.PP
References mPen, and pen()\&.
.PP
Referenced by QCPItemRect()\&.
.PP
.nf
12407 {
12408   mPen = pen;
12409 }
.fi
.SS "void QCPItemRect::setSelectedBrush (const QBrush &brush)"

.PP
Sets the brush that will be used to fill the rectangle when selected\&. To disable filling, set \fIbrush\fP to Qt::NoBrush\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetBrush\fP 
.RE
.PP

.PP
Definition at line 12438 of file qcustomplot\&.cpp\&.
.PP
References brush(), and mSelectedBrush\&.
.PP
Referenced by QCPItemRect()\&.
.PP
.nf
12439 {
12440   mSelectedBrush = brush;
12441 }
.fi
.SS "void QCPItemRect::setSelectedPen (const QPen &pen)"

.PP
Sets the pen that will be used to draw the line of the rectangle when selected\&. 
.PP
\fBSee also:\fP
.RS 4
\fBsetPen\fP, \fBsetSelected\fP 
.RE
.PP

.PP
Definition at line 12416 of file qcustomplot\&.cpp\&.
.PP
References mSelectedPen, and pen()\&.
.PP
Referenced by QCPItemRect()\&.
.PP
.nf
12417 {
12418   mSelectedPen = pen;
12419 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBQCPItemAnchor\fP* const QCPItemRect::bottom"

.PP
Definition at line 1043 of file qcustomplot\&.h\&.
.SS "\fBQCPItemAnchor\fP* const QCPItemRect::bottomLeft"

.PP
Definition at line 1044 of file qcustomplot\&.h\&.
.SS "\fBQCPItemPosition\fP* const QCPItemRect::bottomRight"

.PP
Definition at line 1039 of file qcustomplot\&.h\&.
.PP
Referenced by anchorPixelPoint(), draw(), QCPItemRect(), and selectTest()\&.
.SS "\fBQCPItemAnchor\fP* const QCPItemRect::left"

.PP
Definition at line 1045 of file qcustomplot\&.h\&.
.SS "QBrush QCPItemRect::mBrush\fC [protected]\fP"

.PP
Definition at line 1050 of file qcustomplot\&.h\&.
.PP
Referenced by mainBrush(), selectTest(), and setBrush()\&.
.SS "QPen QCPItemRect::mPen\fC [protected]\fP"

.PP
Definition at line 1049 of file qcustomplot\&.h\&.
.PP
Referenced by mainPen(), and setPen()\&.
.SS "QBrush QCPItemRect::mSelectedBrush\fC [protected]\fP"

.PP
Definition at line 1050 of file qcustomplot\&.h\&.
.PP
Referenced by mainBrush(), and setSelectedBrush()\&.
.SS "QPen QCPItemRect::mSelectedPen\fC [protected]\fP"

.PP
Definition at line 1049 of file qcustomplot\&.h\&.
.PP
Referenced by mainPen(), and setSelectedPen()\&.
.SS "\fBQCPItemAnchor\fP* const QCPItemRect::right"

.PP
Definition at line 1042 of file qcustomplot\&.h\&.
.SS "\fBQCPItemAnchor\fP* const QCPItemRect::top"

.PP
Definition at line 1040 of file qcustomplot\&.h\&.
.SS "\fBQCPItemPosition\fP* const QCPItemRect::topLeft"

.PP
Definition at line 1038 of file qcustomplot\&.h\&.
.PP
Referenced by anchorPixelPoint(), draw(), QCPItemRect(), and selectTest()\&.
.SS "\fBQCPItemAnchor\fP* const QCPItemRect::topRight"

.PP
Definition at line 1041 of file qcustomplot\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for AQ0X from the source code\&.
