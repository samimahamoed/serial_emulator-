.TH "QCPLineEnding" 3 "Thu Oct 30 2014" "Version V0.0" "AQ0X" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QCPLineEnding \- 
.PP
Handles the different ending decorations for line-like items\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qcustomplot\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBEndingStyle\fP { \fBesNone\fP, \fBesFlatArrow\fP, \fBesSpikeArrow\fP, \fBesLineArrow\fP, \fBesDisc\fP, \fBesSquare\fP, \fBesDiamond\fP, \fBesBar\fP }"
.br
.RI "\fIDefines the type of ending decoration for line-like items, e\&.g\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQCPLineEnding\fP ()"
.br
.RI "\fICreates a \fBQCPLineEnding\fP instance with default values (style \fBesNone\fP)\&. \fP"
.ti -1c
.RI "\fBQCPLineEnding\fP (\fBEndingStyle\fP \fBstyle\fP, double \fBwidth\fP=8, double \fBlength\fP=10, bool \fBinverted\fP=false)"
.br
.RI "\fICreates a \fBQCPLineEnding\fP instance with the specified values\&. \fP"
.ti -1c
.RI "\fBEndingStyle\fP \fBstyle\fP () const "
.br
.ti -1c
.RI "double \fBwidth\fP () const "
.br
.ti -1c
.RI "double \fBlength\fP () const "
.br
.ti -1c
.RI "bool \fBinverted\fP () const "
.br
.ti -1c
.RI "void \fBsetStyle\fP (\fBEndingStyle\fP \fBstyle\fP)"
.br
.RI "\fISets the style of the ending decoration\&. \fP"
.ti -1c
.RI "void \fBsetWidth\fP (double \fBwidth\fP)"
.br
.RI "\fISets the width of the ending decoration, if the style supports it\&. \fP"
.ti -1c
.RI "void \fBsetLength\fP (double \fBlength\fP)"
.br
.RI "\fISets the length of the ending decoration, if the style supports it\&. \fP"
.ti -1c
.RI "void \fBsetInverted\fP (bool \fBinverted\fP)"
.br
.RI "\fISets whether the direction of the ending decoration shall be inverted with respect to the natural direction given by the parent item\&. \fP"
.ti -1c
.RI "double \fBboundingDistance\fP () const "
.br
.ti -1c
.RI "void \fBdraw\fP (\fBQCPPainter\fP *painter, const QVector2D &pos, const QVector2D &dir) const "
.br
.ti -1c
.RI "void \fBdraw\fP (\fBQCPPainter\fP *painter, const QVector2D &pos, double angle) const "
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBEndingStyle\fP \fBmStyle\fP"
.br
.ti -1c
.RI "double \fBmWidth\fP"
.br
.ti -1c
.RI "double \fBmLength\fP"
.br
.ti -1c
.RI "bool \fBmInverted\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Handles the different ending decorations for line-like items\&. 

The various ending styles currently supported For every ending a line-like item has, an instance of this class exists\&. For example, \fBQCPItemLine\fP has two endings which can be set with \fBQCPItemLine::setHead\fP and \fBQCPItemLine::setTail\fP\&.
.PP
The styles themselves are defined via the enum \fBQCPLineEnding::EndingStyle\fP\&. Most decorations can be modified regarding width and length, see \fBsetWidth\fP and \fBsetLength\fP\&. The direction of the ending decoration (e\&.g\&. direction an arrow is pointing) is controlled by the line-like item\&. For example, when both endings of a \fBQCPItemLine\fP are set to be arrows, they will point to opposite directions, e\&.g\&. 'outward'\&. This can be changed by \fBsetInverted\fP, which would make the respective arrow point inward\&.
.PP
Note that due to the overloaded \fBQCPLineEnding\fP constructor, you may directly specify a \fBQCPLineEnding::EndingStyle\fP where actually a \fBQCPLineEnding\fP is expected, e\&.g\&.
.PP
.nf
myItemLine->setHead(QCPLineEnding::esSpikeArrow) 

.fi
.PP
 
.PP
Definition at line 243 of file qcustomplot\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQCPLineEnding::EndingStyle\fP"

.PP
Defines the type of ending decoration for line-like items, e\&.g\&. an arrow\&.
.PP
.PP
The width and length of these decorations can be controlled with the functions \fBsetWidth\fP and \fBsetLength\fP\&. Some decorations like \fBesDisc\fP, \fBesSquare\fP, \fBesDiamond\fP and \fBesBar\fP only support a width, the length property is ignored\&.
.PP
\fBSee also:\fP
.RS 4
\fBQCPItemLine::setHead\fP, \fBQCPItemLine::setTail\fP, \fBQCPItemCurve::setHead\fP, \fBQCPItemCurve::setTail\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIesNone \fP\fP
No ending decoration\&. 
.TP
\fB\fIesFlatArrow \fP\fP
A filled arrow head with a straight/flat back (a triangle) 
.TP
\fB\fIesSpikeArrow \fP\fP
A filled arrow head with an indented back\&. 
.TP
\fB\fIesLineArrow \fP\fP
A non-filled arrow head with open back\&. 
.TP
\fB\fIesDisc \fP\fP
A filled circle\&. 
.TP
\fB\fIesSquare \fP\fP
A filled square\&. 
.TP
\fB\fIesDiamond \fP\fP
A filled diamond (45Â° rotated square) 
.TP
\fB\fIesBar \fP\fP
A bar perpendicular to the line\&. 
.PP
Definition at line 257 of file qcustomplot\&.h\&.
.PP
.nf
257                    { esNone          
258                      ,esFlatArrow    
259                      ,esSpikeArrow   
260                      ,esLineArrow    
261                      ,esDisc         
262                      ,esSquare       
263                      ,esDiamond      
264                      ,esBar          
265                    };
.fi
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QCPLineEnding::QCPLineEnding ()"

.PP
Creates a \fBQCPLineEnding\fP instance with default values (style \fBesNone\fP)\&. 
.PP
Definition at line 13450 of file qcustomplot\&.cpp\&.
.PP
.nf
13450                              :
13451   mStyle(esNone),
13452   mWidth(8),
13453   mLength(10),
13454   mInverted(false)
13455 {
13456 }
.fi
.SS "QCPLineEnding::QCPLineEnding (\fBQCPLineEnding::EndingStyle\fPstyle, doublewidth = \fC8\fP, doublelength = \fC10\fP, boolinverted = \fCfalse\fP)"

.PP
Creates a \fBQCPLineEnding\fP instance with the specified values\&. 
.PP
Definition at line 13461 of file qcustomplot\&.cpp\&.
.PP
.nf
13461                                                                                                        :
13462   mStyle(style),
13463   mWidth(width),
13464   mLength(length),
13465   mInverted(inverted)
13466 {
13467 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "double QCPLineEnding::boundingDistance () const"
Returns the maximum pixel radius the ending decoration might cover, starting from the position the decoration is drawn at (typically a line ending/\fBQCPItemPosition\fP of an item)\&.
.PP
This is relevant for clipping\&. Only omit painting of the decoration when the position where the decoration is supposed to be drawn is farther away from the clipping rect than the returned distance\&. 
.PP
Definition at line 13518 of file qcustomplot\&.cpp\&.
.PP
References esBar, esDiamond, esDisc, esFlatArrow, esLineArrow, esNone, esSpikeArrow, esSquare, mLength, mStyle, and mWidth\&.
.PP
Referenced by QCPItemLine::draw()\&.
.PP
.nf
13519 {
13520   switch (mStyle)
13521   {
13522     case esNone:
13523       return 0;
13524       
13525     case esFlatArrow:
13526     case esSpikeArrow:
13527     case esLineArrow:
13528       return qSqrt(mWidth*mWidth+mLength*mLength); // items that have width and length
13529       
13530     case esDisc:
13531     case esSquare:
13532     case esDiamond:
13533     case esBar:
13534       return mWidth*1\&.42; // items that only have a width -> with*sqrt(2)
13535   }
13536   return 0;
13537 }
.fi
.SS "void QCPLineEnding::draw (\fBQCPPainter\fP *painter, const QVector2D &pos, const QVector2D &dir) const"
Draws the line ending with the specified \fIpainter\fP at the position \fIpos\fP\&. The direction of the line ending is controlled with \fIdir\fP\&. 
.PP
Definition at line 13544 of file qcustomplot\&.cpp\&.
.PP
References QCPPainter::drawLine(), esBar, esDiamond, esDisc, esFlatArrow, esLineArrow, esNone, esSpikeArrow, esSquare, mInverted, mLength, mStyle, mWidth, and QCPPainter::setPen()\&.
.PP
Referenced by draw(), QCPItemLine::draw(), and QCPItemCurve::draw()\&.
.PP
.nf
13545 {
13546   if (mStyle == esNone)
13547     return;
13548   
13549   QVector2D lengthVec(dir\&.normalized()*(mInverted ? -1 : 1));
13550   if (lengthVec\&.isNull())
13551     lengthVec = QVector2D(1, 0);
13552   QVector2D widthVec(-lengthVec\&.y(), lengthVec\&.x());
13553   lengthVec *= mLength;
13554   widthVec *= mWidth*0\&.5;
13555   
13556   QPen penBackup = painter->pen();
13557   QPen miterPen = penBackup;
13558   miterPen\&.setJoinStyle(Qt::MiterJoin);
13559   switch (mStyle)
13560   {
13561     case esNone: break;
13562     case esFlatArrow:
13563     {
13564       QPointF points[3] = {pos\&.toPointF(),
13565                            (pos-lengthVec+widthVec)\&.toPointF(),
13566                            (pos-lengthVec-widthVec)\&.toPointF()
13567                           };
13568       painter->setPen(miterPen);
13569       painter->drawConvexPolygon(points, 3);
13570       painter->setPen(penBackup);
13571       break;
13572     }
13573     case esSpikeArrow:
13574     {
13575       QPointF points[4] = {pos\&.toPointF(),
13576                            (pos-lengthVec+widthVec)\&.toPointF(),
13577                            (pos-lengthVec*0\&.8)\&.toPointF(),
13578                            (pos-lengthVec-widthVec)\&.toPointF()
13579                           };
13580       painter->setPen(miterPen);
13581       painter->drawConvexPolygon(points, 4);
13582       painter->setPen(penBackup);
13583       break;
13584     }
13585     case esLineArrow:
13586     {
13587       QPointF points[3] = {(pos-lengthVec+widthVec)\&.toPointF(),
13588                            pos\&.toPointF(),
13589                            (pos-lengthVec-widthVec)\&.toPointF()
13590                           };
13591       painter->setPen(miterPen);
13592       painter->drawPolyline(points, 3);
13593       painter->setPen(penBackup);
13594       break;
13595     }
13596     case esDisc:
13597     {
13598       painter->drawEllipse(pos\&.toPointF(),  mWidth*0\&.5, mWidth*0\&.5);
13599       break;
13600     }
13601     case esSquare:
13602     {
13603       QVector2D widthVecPerp(-widthVec\&.y(), widthVec\&.x());
13604       QPointF points[4] = {(pos-widthVecPerp+widthVec)\&.toPointF(),
13605                            (pos-widthVecPerp-widthVec)\&.toPointF(),
13606                            (pos+widthVecPerp-widthVec)\&.toPointF(),
13607                            (pos+widthVecPerp+widthVec)\&.toPointF()
13608                           };
13609       painter->setPen(miterPen);
13610       painter->drawConvexPolygon(points, 4);
13611       painter->setPen(penBackup);
13612       break;
13613     }
13614     case esDiamond:
13615     {
13616       QVector2D widthVecPerp(-widthVec\&.y(), widthVec\&.x());
13617       QPointF points[4] = {(pos-widthVecPerp)\&.toPointF(),
13618                            (pos-widthVec)\&.toPointF(),
13619                            (pos+widthVecPerp)\&.toPointF(),
13620                            (pos+widthVec)\&.toPointF()
13621                           };
13622       painter->setPen(miterPen);
13623       painter->drawConvexPolygon(points, 4);
13624       painter->setPen(penBackup);
13625       break;
13626     }
13627     case esBar:
13628     {
13629       painter->drawLine((pos+widthVec)\&.toPointF(), (pos-widthVec)\&.toPointF());
13630       break;
13631     }
13632   }
13633 }
.fi
.SS "void QCPLineEnding::draw (\fBQCPPainter\fP *painter, const QVector2D &pos, doubleangle) const"
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&.
.PP
Draws the line ending\&. The direction is controlled with the \fIangle\fP parameter in radians\&. 
.PP
Definition at line 13640 of file qcustomplot\&.cpp\&.
.PP
References draw()\&.
.PP
.nf
13641 {
13642   draw(painter, pos, QVector2D(qCos(angle), qSin(angle)));
13643 }
.fi
.SS "bool QCPLineEnding::inverted () const\fC [inline]\fP"

.PP
Definition at line 274 of file qcustomplot\&.h\&.
.PP
Referenced by setInverted()\&.
.PP
.nf
274 { return mInverted; }
.fi
.SS "double QCPLineEnding::length () const\fC [inline]\fP"

.PP
Definition at line 273 of file qcustomplot\&.h\&.
.PP
Referenced by setLength()\&.
.PP
.nf
273 { return mLength; }
.fi
.SS "void QCPLineEnding::setInverted (boolinverted)"

.PP
Sets whether the direction of the ending decoration shall be inverted with respect to the natural direction given by the parent item\&. For example, an arrow decoration will point inward when \fIinverted\fP is set to true\&. 
.PP
Definition at line 13504 of file qcustomplot\&.cpp\&.
.PP
References inverted(), and mInverted\&.
.PP
.nf
13505 {
13506   mInverted = inverted;
13507 }
.fi
.SS "void QCPLineEnding::setLength (doublelength)"

.PP
Sets the length of the ending decoration, if the style supports it\&. On arrows, for example, the length defines the size in pointing direction\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetWidth\fP 
.RE
.PP

.PP
Definition at line 13494 of file qcustomplot\&.cpp\&.
.PP
References length(), and mLength\&.
.PP
.nf
13495 {
13496   mLength = length;
13497 }
.fi
.SS "void QCPLineEnding::setStyle (\fBQCPLineEnding::EndingStyle\fPstyle)"

.PP
Sets the style of the ending decoration\&. 
.PP
Definition at line 13472 of file qcustomplot\&.cpp\&.
.PP
References mStyle, and style()\&.
.PP
.nf
13473 {
13474   mStyle = style;
13475 }
.fi
.SS "void QCPLineEnding::setWidth (doublewidth)"

.PP
Sets the width of the ending decoration, if the style supports it\&. On arrows, for example, the width defines the size perpendicular to the arrow's pointing direction\&.
.PP
\fBSee also:\fP
.RS 4
\fBsetLength\fP 
.RE
.PP

.PP
Definition at line 13483 of file qcustomplot\&.cpp\&.
.PP
References mWidth, and width()\&.
.PP
.nf
13484 {
13485   mWidth = width;
13486 }
.fi
.SS "\fBEndingStyle\fP QCPLineEnding::style () const\fC [inline]\fP"

.PP
Definition at line 271 of file qcustomplot\&.h\&.
.PP
Referenced by QCPItemLine::draw(), QCPItemCurve::draw(), and setStyle()\&.
.PP
.nf
271 { return mStyle; }
.fi
.SS "double QCPLineEnding::width () const\fC [inline]\fP"

.PP
Definition at line 272 of file qcustomplot\&.h\&.
.PP
Referenced by setWidth()\&.
.PP
.nf
272 { return mWidth; }
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool QCPLineEnding::mInverted\fC [protected]\fP"

.PP
Definition at line 290 of file qcustomplot\&.h\&.
.PP
Referenced by draw(), and setInverted()\&.
.SS "double QCPLineEnding::mLength\fC [protected]\fP"

.PP
Definition at line 289 of file qcustomplot\&.h\&.
.PP
Referenced by boundingDistance(), draw(), and setLength()\&.
.SS "\fBEndingStyle\fP QCPLineEnding::mStyle\fC [protected]\fP"

.PP
Definition at line 288 of file qcustomplot\&.h\&.
.PP
Referenced by boundingDistance(), draw(), and setStyle()\&.
.SS "double QCPLineEnding::mWidth\fC [protected]\fP"

.PP
Definition at line 289 of file qcustomplot\&.h\&.
.PP
Referenced by boundingDistance(), draw(), and setWidth()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for AQ0X from the source code\&.
